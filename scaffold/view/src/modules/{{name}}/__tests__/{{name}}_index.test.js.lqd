import React from 'react';
import { HashRouter } from 'react-router-dom';
import {render, fireEvent, cleanup, waitForElement} from 'react-testing-library';
import TestRenderer from 'react-test-renderer';
import 'jest-dom/extend-expect';
import jquery from 'jquery';

import {EventBus} from '../../../lib/js/eventBus';
import {store} from '../../../lib/js/store';

import { dataExamples } from '../../__fixtures__/example_data';
import { {{name | pluralize}}_data } from '../__fixtures__/{{name}}_fixtures';

import { {{class_name}}} from '../js/{{name}}';
import { {{class_name}}Index, {{class_name}}IndexList, {{class_name}}IndexItem} from '../js/{{name}}_index';

window.$ = $ = jquery;
window.csrf_token = 'skdjhasdjhaksjdhaksjhdaksjh';

beforeEach(() => {
  jest.resetModules();
  store.getState()["{{name}}"] = {{name | pluralize}}_data.slice();
});

afterEach(cleanup);

it("{{class_name}}Index sorts the data by default on id field", () => {
  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(store.getState()["{{name}}"])
  });

  let state = store.getState()["{{name}}"];

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;
  const list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[2]);
})

it("{{class_name}}Index changes the sort direction", () => {
  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(store.getState()["{{name}}"])
  });

  let state = store.getState()["{{name}}"];

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  const list = testInstance.findByType({{class_name}}IndexList);
  const index = testInstance.findByType({{class_name}}Index);

  index.instance.toggleSort({target: { dataset: {field: 'id'}}});

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[2]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[0]);
})

{% for field in visible_fields -%}
{% if field.name != "user" and field.type != "reference" -%}
it("{{class_name}}Index sorts the data on {{field.name}}", () => {
  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(store.getState()["{{name}}"])
  });

  let sorted = store.getState()["{{name}}"].slice().sort((a,b) => {
    if (a.{{field.name}} == b.{{field.name}}) {
      return 0
    }
    return a.{{field.name}} < b.{{field.name}} ? -1 : 1
  });

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  const list = testInstance.findByType({{class_name}}IndexList);
  const index = testInstance.findByType({{class_name}}Index);

  index.instance.toggleSort({target: { dataset: {field: '{{field.name}}'}}});

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(sorted[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(sorted[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(sorted[2]);
})

it("{{class_name}}Index sorts the data on {{field.name}} descending", () => {
  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(store.getState()["{{name}}"])
  });

  let sorted = store.getState()["{{name}}"].slice().sort((a,b) => {
    if (a.{{field.name}} == b.{{field.name}}) {
      return 0
    }
    return a.{{field.name}} < b.{{field.name}} ? 1 : -1
  });

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  const list = testInstance.findByType({{class_name}}IndexList);
  const index = testInstance.findByType({{class_name}}Index);

  index.instance.toggleSort({target: { dataset: {field: '{{field.name}}'}}});
  index.instance.toggleSort({target: { dataset: {field: '{{field.name}}'}}});

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(sorted[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(sorted[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(sorted[2]);
})
{% endif -%}
{% endfor %}

it("{{class_name}}Index#componentWillMount subscribes to the resource stream", () => {
  store.subscribe = jest.fn();

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  expect(store.subscribe).toBeCalledWith("{{name}}", "/{{name | pluralize}}", expect.any(Function));
})

it("{{class_name}}Index#componentWillMount adds a new model and re-sorts the data", () => {
  const state = store.getState()["{{name}}"];

  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(state)
  })

  let clone = new {{class_name}}(state[0]);
  clone.id = state.length + 1;

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;
  const index = testInstance.findByType({{class_name}}Index);

  index.instance.toggleSort({target: { dataset: {field: 'id'}}});

  store.getState()["{{name}}"].push(clone);

  EventBus.emit('new:model:{{name}}', clone);

  const list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(4);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[3]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[2]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][3]).toBe(state[0]);
})

it("{{class_name}}Index#componentWillMount updates a model and re-sorts the data", () => {
  const state = store.getState()["{{name}}"];

  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(state)
  })

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  const list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[2]);

  state[0] = Object.assign({}, state[0]);
  state[0].id = 5;

  EventBus.emit('update:model:{{name}}', state[0]);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[2]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[0]);
})

it("{{class_name}}Index#componentWillMount deletes a model and re-sorts the data", () => {
  const state = store.getState()["{{name}}"];

  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(state)
  })

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  const list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[2]);

  let deleted = state[1]
  store.getState()["{{name}}"] = [state[0], state[2]];

  EventBus.emit('delete:model:{{name}}', deleted);

  expect(list.props['{{name | pluralize}}']).toHaveLength(2);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[2]);
})

it("{{class_name}}Index#componentWillMount deletes a model via the store", () => {
  const state = store.getState()["{{name}}"];

  const {{name}} = {{name | pluralize}}_data[0];
  const resp = {data: {{name}}};

  store.subscribe = jest.fn().mockImplementation((model, endpoint, callback) => {
    callback(state)
  })

  $.ajax = jest.fn(() => Promise.resolve(resp));

  let testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  let testInstance = testRenderer.root;

  let list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(3);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[1]);
  expect(list.props['{{name | pluralize}}'][2]).toBe(state[2]);

  EventBus.emit('cmd:delete:{{name}}', state[1].id);

  expect($.ajax).toBeCalledWith({
    method: 'DELETE',
    url: '/{{name | pluralize}}/'+state[1].id,
    dataType: 'json',
    headers: {
      "X-CSRF-TOKEN": window.csrf_token
    },
  });

  testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  testInstance = testRenderer.root;

  list = testInstance.findByType({{class_name}}IndexList);

  expect(list.props['{{name | pluralize}}']).toHaveLength(2);

  expect(list.props['{{name | pluralize}}'][0]).toBe(state[0]);
  expect(list.props['{{name | pluralize}}'][1]).toBe(state[2]);
})

{% for field in visible_fields -%}
{% if field.name != "user" and field.type == "reference" -%}
it("{{class_name}}Index#componentWillMount subscribes to related {{field.name | pluralize}}", () => {
  store.subscribe = jest.fn()

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  expect(store.subscribe).toBeCalledWith("{{field.name}}", "/{{field.name | pluralize}}", expect.any(Function))
})
{% endif -%}
{% endfor %}

it("{{class_name}}Index renders 1 {{class_name}}IndexList", () => {
  store.subscribe = jest.fn();

  const testRenderer = TestRenderer.create( <HashRouter>
     <{{class_name}}Index />
   </HashRouter>);
  const testInstance = testRenderer.root;

  expect(testInstance.findAllByType({{class_name}}IndexList).length).toBe(1)
})

it("{{class_name}}IndexList renders {{class_name}}IndexItem for each {{class_name}}", () => {
  const testRenderer = TestRenderer.create(<HashRouter>
     <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
   </HashRouter>);
  const testInstance = testRenderer.root;

  expect(testInstance.findAllByType({{class_name}}IndexItem).length).toBe(store.getState()["{{name}}"].length)
})

it("{{class_name}}IndexItem#delete shows window confirmation dialog", () => {
  window.confirm = jest.fn(() => false) // cancel the delete

  const { getByLabelText, getByRole, getByTestId, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );

  fireEvent.click(getByRole("{{name}}-delete"));

  expect(window.confirm).toBeCalled()
})

it("{{class_name}}IndexItem#delete emits EventBus delete", () => {
  const ev_spy = jest.spyOn(EventBus, 'emit');
  const {{name}} = {{name | pluralize}}_data[0];
  const resp = {data: {{name}}};
  window.confirm = jest.fn(() => true) // continue with delete
  $.ajax = jest.fn(() => Promise.resolve(resp));

  const { getByLabelText, getByRole, getByTestId, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );

  fireEvent.click(getByRole("{{name}}-delete"));

  expect(ev_spy).toBeCalledWith("cmd:delete:{{name}}", {{name}}.id);

  expect($.ajax).toBeCalledWith({
    method: 'DELETE',
    url: '/{{name | pluralize}}/'+{{name}}.id,
    dataType: 'json',
    headers: {
      "X-CSRF-TOKEN": window.csrf_token
    },
  });

  ev_spy.mockRestore();
})

it("{{class_name}}IndexItem renders each field", () => {
  const {getAllByTitle, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );

  {% for field in visible_fields -%}
  {% if field.name != "user" -%}
  expect(getAllByTitle("{{name}}-{{field.name}}")).toHaveLength(store.getState()["{{name}}"].length)
  {% endif -%}
  {% endfor %}
})

it("{{class_name}}IndexItem renders link to edit {{name}}", () => {
  const {getAllByRole, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );
  expect(getAllByRole("{{name}}-edit")).toHaveLength(store.getState()["{{name}}"].length)
})

it("{{class_name}}IndexItem renders icon to delete {{name}}", () => {
  const {getAllByRole, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );
  expect(getAllByRole("{{name}}-delete")).toHaveLength(store.getState()["{{name}}"].length)
})

it("{{class_name}}IndexItem renders link to show {{name}}", () => {
  const {getAllByRole, container, asFragment} = render(
    <HashRouter>
       <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
     </HashRouter>
  );
  expect(getAllByRole("{{name}}-show")).toHaveLength(store.getState()["{{name}}"].length)
})

describe('related models', () => {
{% for field in visible_fields -%}
{% if field.name != "user" and field.type == "reference" -%}
{{"  "}}let {{field.name}}_data;
{% endif -%}
{% endfor %}

  beforeAll(() => {
  {% for field in visible_fields -%}
  {% if field.name != "user" and field.type == "reference" -%}
{{"    "}}{{field.name}}_data = store.getState()["{{field.name}}"].slice();
  {% endif -%}
  {% endfor %}
  })

  beforeEach(() => {
  {% for field in visible_fields -%}
  {% if field.name != "user" and field.type == "reference" -%}
{{"    "}}store.getState()["{{field.name}}"] = {{field.name}}_data.map((item) => {
      return Object.assign({}, item)
    });
  {% endif -%}
  {% endfor %}
  })

  {% for field in visible_fields -%}
  {% if field.name != "user" and field.type == "reference" -%}
  it("{{class_name}}IndexItem renders link to related {{field.name}}", () => {
    // setup the link between each {{name}} and a {{field.name}}
    store.getState()["{{name}}"].map((item, index) => {
      item.{{field.name}}_id = index + 1
    })

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    expect(links).toHaveLength(store.getState()["{{name}}"].length);

    links.forEach((item, index) => {
      expect(item).toHaveAttribute('href', `#/{{field.name | pluralize}}/show/${index + 1}`)
    })
  })

  it("{{class_name}}IndexItem link to related {{field.name}} displays title", () => {
    store.getState()["{{field.name}}"].map((item, index) => {
      item.title = `Title ${index +1}`
    });

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    links.forEach((item, index) => {
      expect(item).toHaveTextContent(`Title ${index + 1}`)
    })
  })

  it("{{class_name}}IndexItem link to related {{field.name}} displays name", () => {
    store.getState()["{{field.name}}"].map((item, index) => {
      item.name = `Name ${index +1}`
    });

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    links.forEach((item, index) => {
      expect(item).toHaveTextContent(`Name ${index + 1}`)
    })
  })

  it("{{class_name}}IndexItem link to related {{field.name}} displays username", () => {
    store.getState()["{{field.name}}"].map((item, index) => {
      delete item.name;
      item.username = `Username ${index +1}`
    });

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    links.forEach((item, index) => {
      expect(item).toHaveTextContent(`Username ${index + 1}`)
    })
  })

  it("{{class_name}}IndexItem link to related {{field.name}} displays email", () => {
    store.getState()["{{field.name}}"].map((item, index) => {
      delete item.name;
      item.email = `Email ${index +1}`
    });

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    links.forEach((item, index) => {
      expect(item).toHaveTextContent(`Email ${index + 1}`)
    })
  })

  it("{{class_name}}IndexItem link to related {{field.name}} displays id default", () => {
    store.getState()["{{field.name}}"].map((item, index) => {
      delete item.name;
      item.id = `${index +1}`
    });

    const {getAllByRole, container, asFragment} = render(
      <HashRouter>
         <{{class_name}}IndexList {{name | pluralize}}={store.getState()["{{name}}"]} delegate={jest.fn()} />
       </HashRouter>
    );

    let links = getAllByRole("{{name}}-{{field.name}}-link");

    links.forEach((item, index) => {
      expect(item).toHaveTextContent(`${index + 1}`)
    })
  })

  it.skip("{{class_name}}IndexItem show link includes state for related {{field.name}}", () => {

  })
  {% endif -%}
  {% endfor %}
})

it.skip("{{class_name}}IndexItem link to show {{name}} includes state", () => {

})
