/* eslint-disable no-trailing-spaces */
import React from 'react'
import { Link } from 'react-router-dom'
import PropTypes from 'prop-types'
import { withTheme } from '@material-ui/core/styles'

import { EventBus } from '../../../lib/js/eventBus'
import { bestTitleForClass } from '../../../lib/js/utils'
import { store } from '../../../lib/js/store'

import { {{class_name}} } from './{{name}}'

class {{class_name}}IndexComponent extends React.Component {
  constructor (props) {
    super(props)

    this.state = {
      list: [],
      sort_column: 'id',
      sort_direction: 'up'
    }
    this.toggleSort = this.toggleSort.bind(this)
  }

  toggleSort (event) {
    this.sort(event)
  }

  sort (event) {
    if (event && typeof event === 'string') {
      // we were given the column to sort on as a string
      if (this.state.sort_column === event) {
        this.state.sort_direction = this.state.sort_direction === 'up' ? 'down' : 'up'
      }
      this.state.sort_column = event
    } else if (event && event.target) {
      // the sort column to sort on is the result of a click
      if (this.state.sort_column === event.target.dataset.field) {
        this.state.sort_direction = this.state.sort_direction === 'up' ? 'down' : 'up'
      }
      this.state.sort_column = event.target.dataset.field
    }

    let vm = this

    let sorted = store.getState()['{{name}}'].slice().sort((a, b) => {
      let aVal = a[vm.state.sort_column]
      let bVal = b[vm.state.sort_column]

      if (aVal === bVal) {
        return 0
      }
      if (aVal < bVal) {
        return vm.state.sort_direction === 'up' ? -1 : 1
      } else {
        return vm.state.sort_direction === 'up' ? 1 : -1
      }
    })

    this.setState({ list: sorted })
  }

  componentWillMount () {
    let vm = this

    store.subscribe('{{name}}', '/{{name | pluralize}}', (data) => {
      if (data) {
        vm.sort()
      }
    })

    EventBus.on('new:model:{{name}}', this.newListener = (model) => {
      vm.sort()
    })

    EventBus.on('update:model:{{name}}', this.updateListener = (model) => {
      vm.sort()
    })

    EventBus.on('delete:model:{{name}}', this.deleteListener = (model) => {
      vm.sort()
    })

    EventBus.on('cmd:delete:{{name}}', this.cmdListener = (id) => {
      store.delete('{{name}}', id)
    })

    // subscribe to related data
{% for field in visible_fields -%}
  {% if field.type == "reference" -%}
  {% if field.name != "user" -%}
{{" "}}
    store.subscribe('{{field.name}}', '/{{field.name | pluralize}}', (data) => {
      if (data) {
        // trigger a re-render
        vm.sort()
      }
    })
  {% endif -%}
  {% endif -%}
{% endfor %}
  }

  componentWillUnmount () {
    EventBus.off('new:model:{{name}}', this.newListener)
    EventBus.off('update:model:{{name}}', this.updateListener)
    EventBus.off('delete:model:{{name}}', this.deleteListener)
    EventBus.off('cmd:delete:{{name}}', this.cmdListener)
  }

  render () {
    return (
      <{{class_name}}IndexList {{name | pluralize}}={this.state.list} delegate={this}/>
    )
  }
}

{{class_name}}IndexComponent.propTypes = {
  theme: PropTypes.object.isRequired
}

export const {{class_name}}Index = withTheme()({{class_name}}IndexComponent)

class {{class_name}}IndexListComponent extends React.Component {
  constructor (props) {
    super(props)

    const { theme } = props

    this.styles = {
      primaryText: {
        backgroundColor: theme.palette.background.default,
        padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,
        color: theme.palette.text.primary
      },
      primaryColor: {
        backgroundColor: theme.palette.primary.main,
        padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`
        // color: theme.palette.common.white
      },
      button: {
        backgroundColor: theme.palette.secondary.main,
        color: theme.palette.text.secondary
      },
      links: {
        color: theme.palette.secondary.main
      }
    }
  }

  render () {
    let clickHandler = this.props.delegate ? this.props.delegate.toggleSort : () => {}
    return (
      <div>
        <div className="row {{name}}-index-title-row index-title-row">
          <div className="col-sm-11">
            <h2 className="{{name}}-index-title index-title">{{display_name | pluralize}}</h2>
          </div>
          <div className="col-sm-1">
            <div className="{{name}}-index-new-button index-new-button btn btn-secondary btn-xs">
              <Link style={this.styles.button} to="/{{name | pluralize}}/new">New</Link>
            </div>
          </div>
        </div>

        <div className="table-responsive {{name}}-index-table index-table">
          <table className="table table-striped">
            <thead>
              <tr className="{{name}}-index.table-head-row index-table-head-row">
              {% for field in visible_fields -%}
              {% if field.name != "user" %}
                <th className="{{name}}-index-table-head index-table-head"
                {% if field.type != "reference" -%}
                {{"  "}}data-field="{{field.name}}" onClick={clickHandler}
                {% endif -%}
                >{{field.name | capitalize }}</th>
              {% endif -%}
              {% endfor %}
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              { this.props.{{name | pluralize}} &&
                this.props.{{name | pluralize}}.map((instance,index) => {
                  return (
                    <{{class_name}}IndexItem key={index} {{name}}={instance} delegate={this.props.delegate} styles={this.styles} />
                  )
                })
              }
            </tbody>
          </table>
        </div>
      </div>
    );
  }
}

{{class_name}}IndexListComponent.propTypes = {
  theme: PropTypes.object.isRequired,
  {{name | pluralize}}: PropTypes.array.isRequired,
  delegate: PropTypes.oneOfType([
    PropTypes.element,
    PropTypes.object,
    PropTypes.func
  ]).isRequired
}

export const {{class_name}}IndexList = withTheme()({{class_name}}IndexListComponent)

class {{class_name}}IndexItemComponent extends React.Component {
  constructor (props) {
    super(props)

    this.styles = props.styles
  }

  delete (id, event) {
    event.preventDefault()
    if (id) {
      if (window.confirm('Are you sure you want to delete this {{name | capitalize}}?')) {
        EventBus.emit('cmd:delete:{{name}}', id)
      }
    }
  }

  render () {
    const {{name}} = this.props.{{name}}
{% for field in visible_fields -%}
{% if field.type == "reference" -%}
{% if field.name != "user" -%}
{{"    "}}const {{field.name}} = store.find('{{field.name}}', {{name}}.{{field.name}}_id)
{% endif -%}
{% endif -%}
{% endfor -%}
{{" "}}
    return (
      <tr className="{{name}}-index-table-row index-table-row">
        {% for field in visible_fields -%}
        {% if field.name != "user" -%}
        {% if field.type == "reference" -%}
        <td title="{{name}}-{{field.name}}" className="{{name}}-{{field.name}}-index-table-data {{name}}-index-table-data index-table-data">
          <Link style={this.styles.link} role="{{name}}-{{field.name}}-link" to={
            {
              pathname: '{{field.name | pluralize}}/show/' + {{name}}.{{field.name}}_id,
              state: {
                {{field.name}}: {{field.name}} || {}
              }
            }
          }>
            { bestTitleForClass({{field.name}} || { id: {{name}}.{{field.name}}_id }) }
          </Link>
        </td>
        {% else -%}
          <td title="{{name}}-{{field.name}}" className="{{name}}-{{field.name}}-index-table-data {{name}}-index-table-data index-table-data">{ {{name}}.{{field.name}} }</td>
        {% endif -%}
        {% endif -%}
        {% endfor %}
        <td className="{{name}}-index-actions-column index-actions-column">
          <div className="row">
            <div className="col">
              <Link className="{{name}}-index-actions-edit index-actions-edit"
                role="{{name}}-edit"
                to={
                  {
                    pathname: '/{{name | pluralize}}/edit/' + {{name}}.id,
                    state: {{name}}
                  }
                }
              ><i className="material-icons">edit</i></Link>
            </div>
            <div className="col">
              <span className="{{name}}-index-actions-delete index-actions-delete"
                role="{{name}}-delete"
                onClick={this.delete.bind(this, {{name}}.id)}
              >
                <i className="material-icons">delete</i>
              </span>
            </div>
            <div className="col">
              <Link className="{{name}}-index-actions-show index-actions-show"
                role="{{name}}-show"
                to={
                  {
                    pathname: '/{{name | pluralize}}/show/' + {{name}}.id,
                    state: {
                      {% for field in visible_fields -%}
                      {% if field.type == "reference" -%}
                      {% if field.name != "user" %}
                      {{field.name}}: {{field.name}},
                      {% endif -%}
                      {% endif -%}
                      {% endfor %}
                      {{name}}: {{name}}
                    }
                  }
                }
              ><i className="material-icons">arrow_forward_ios</i></Link>
            </div>
          </div>
        </td>
      </tr>
    )
  }
}

{{class_name}}IndexItemComponent.propTypes = {
  theme: PropTypes.object.isRequired,
  {{name}}: PropTypes.object.isRequired,
  delegate: PropTypes.oneOfType([
    PropTypes.element,
    PropTypes.object,
    PropTypes.func
  ]).isRequired,
  styles: PropTypes.object.isRequired
}

export const {{class_name}}IndexItem = withTheme()({{class_name}}IndexItemComponent)
