
import React from 'react';
import { Link } from 'react-router-dom';
import PropTypes from "prop-types";

import {EventBus} from '../../../lib/js/eventBus';
import {bestTitleForClass} from '../../../lib/js/utils';
import {store} from '../../../lib/js/store';

import { {{class_name}} } from './{{name}}';

export class {{class_name}}View extends React.Component {
  constructor(props) {
    super(props);

    this.state = this.props.location.state || {}
  }

  onBack() {
    this.props.history.goBack()
  }

  componentWillMount() {
    let vm = this;

    if (typeof this.state.{{name}} === 'undefined') {
      // load the resource for the param ID
      this.state.{{name}} = store.find( "{{name}}", this.props.match.params.id)
    }

    {% for field in visible_fields -%}
    {% if field.type == "reference" -%}
    {% if field.name != "user" %}
    if (this.state.{{name}} && typeof this.state.{{field.name}} === 'undefined') {
      // load the resource for the param ID
      this.state.{{field.name}} = store.find( "{{field.name}}", this.state.{{name}}.{{field.name}}_id)
    }
    {% endif -%}
    {% endif -%}
    {% endfor -%}

    // this is included to help developers load related objects for a model
    // the recipe generator cannot know which models belong to {{name}}
    // rename 'related' to the model name and uncomment the sections
    // e.g. for 'comments' that belong to this {{name}}
    // if (this.state.{{name}} && typeof this.state.comments === 'undefined') {

    // this requires the related objects to already be loaded in the store
    // develoeprs can ensure that with e.g.
    // store.loadResources('comment', '/comments', (data) => { /* data is an array of Resource */})

    /*
    if (this.state.{{name}} && typeof this.state.related === 'undefined') {
      let related = store.related('related', '{{name}}_id', this.state.{{name}}.id);

      if (typeof related.catch === 'function') {
        related.catch((error, statusText) => {
          store.handleErrors("Show", "related", statusText, error);
        })
      } else {
        // we got an array of records with matching {{name}}_id
        vm.setState({related: related})
      }
    }
    */

    // An alternative is to use Resource.query() which makes a request to the backend
    /*
      import Resource from '../../../lib/js/resource'
      let res = new Resource('/comments');

      res.query({field: "{{name}}_id", value: 1}).then((response) => {
        if (response.data) {
          vm.setState({ comments: response.data})
        }
      }).catch((error, statusText) => {
        console.log('store load resources failed with', error);
        store.handleErrors('Query', 'comment', statusText, error);
      })
    */

  }

  render() {
    const {{name}} = this.state.{{name}} || {};
    const related = this.state.related || [];

    {% for field in visible_fields -%}
    {% if field.type == "reference" -%}
    {% if field.name != "user" %}
    const {{field.name}} =  this.state.{{field.name}} || {};
    {% endif -%}
    {% endif -%}
    {% endfor %}

    return (
    <div className="table-responsive {{name}}-view-table view-table">
      <div className="btn btn-primary btn-xs"
        onClick={this.onBack.bind(this)}
        >
        Back
      </div>
      <table className="table table-striped">
        <tbody>
          {% for field in visible_fields %}
          {% if field.name != "user" %}
          <tr>
            <th className="{{name}}-view-table-head view-table-head">{{ field.name | capitalize }}</th>
            {% if field.type == "reference" %}
            <td className="{{name}}-view-table-data view-table-data">
              <Link to={
                {
                  pathname: "/{{field.name | pluralize}}/show/" +{{name}}.{{field.name}}_id,
                  state: {
                    {{field.name}}: {{field.name}},
                    {{name}}: {{name}}
                  }
                }
              }>{ bestTitleForClass({{field.name}} || {id: {{name}}.{{field.name}}_id })}</Link>
              </td>
            {% else %}
            <td className="{{name}}-view-table-data view-table-data">{ {{name}}.{{field.name}} }</td>
            {% endif %}
          </tr>
          {% endif %}
          {% endfor %}
        </tbody>
      </table>

      { related.length > 0 &&
        <div className="{{name}}-related-table related-table">
          <h3>RELATED - change me</h3>
          <table className="table table-striped">
            <tbody>
              {
                related.map((obj) => {
                  /*
                    we could link to the related object with
                    <td className="{{name}}-related-table-data related-table-data view-table-data">
                      <Link to={
                        {
                          // change plural_related to the plural related model name
                          pathname: "/plural_related/show/"+ obj.id,
                          state: {
                            related: obj,  // change related to the related model name
                            {{name}}: {{name}}
                          }
                        }
                      }>{ bestTitleForClass(obj) }</Link>
                    </td>
                  */
                  return (
                    <tr key={obj.id}>
                      <td className="{{name}}-related-table-data related-table-data view-table-data">{ bestTitleForClass(obj) }</td>

                    </tr>
                  )
                })
              }
            </tbody>
          </table>
        </div>

      }

    </div>

    )
  }
}

{{class_name}}View.proptypes = {
  location: PropTypes.object.isRequired,
  history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired
}
