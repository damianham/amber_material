import React from 'react';
import PropTypes from 'prop-types'

import {
  Link,
  NavLink,
  Route,
  Switch
} from 'react-router-dom';

import classNames from 'classnames';
import { withStyles } from '@material-ui/core/styles';
import Drawer from '@material-ui/core/Drawer';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import List from '@material-ui/core/List';
import CssBaseline from '@material-ui/core/CssBaseline';
import Typography from '@material-ui/core/Typography';
import Divider from '@material-ui/core/Divider';
import IconButton from '@material-ui/core/IconButton';
import MenuIcon from '@material-ui/icons/Menu';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';

import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';
import ChevronRightIcon from '@material-ui/icons/ChevronRight';
import InboxIcon from '@material-ui/icons/MoveToInbox';
import MailIcon from '@material-ui/icons/Mail';
import ExitToApp from '@material-ui/icons/ExitToApp'
import HomeIcon from '@material-ui/icons/Home';
import ViewModuleIcon from '@material-ui/icons/ViewModule';
import PersonIcon from '@material-ui/icons/Person';
import PersonAddIcon from '@material-ui/icons/PersonAdd';

import Auth from '../../lib/js/auth';
import routes from '../../modules/js/routes';

const icons = {
  'Exit': ExitToApp,
  'Home': HomeIcon,
  'Inbox': InboxIcon,
  'Mail': MailIcon,
  'Person': PersonIcon,
  'View': ViewModuleIcon
};

const drawerWidth = 240;

const styles = theme => ({
  root: {
    display: 'flex',
  },
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
  },
  appBarShift: {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  menuButton: {
    marginLeft: 12,
    marginRight: 36,
  },
  hide: {
    display: 'none',
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
  },
  drawerOpen: {
    width: drawerWidth,
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  drawerClose: {
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: theme.spacing.unit * 7 + 1,
    [theme.breakpoints.up('sm')]: {
      width: theme.spacing.unit * 9 + 1,
    },
  },
  toolbar: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 8px',
    ...theme.mixins.toolbar,
  },
  content: {
    flexGrow: 1,
    padding: theme.spacing.unit * 3,
  },
});

class ListItemLink extends React.Component {
  constructor(props, state) {
    super(props, state);

    this.renderLink = function(itemProps) {
      return (
        <Link to={this.props.to} {...itemProps} />
      )
    }.bind(this)
  }

  render() {
    const { icon, primary } = this.props;
    return (
      <li>
        <ListItem button component={this.renderLink}>
          <ListItemIcon>{icon}</ListItemIcon>
          <ListItemText primary={primary} />
        </ListItem>
      </li>
    );
  }
}

ListItemLink.propTypes = {
  icon: PropTypes.node.isRequired,
  primary: PropTypes.node.isRequired,
  to: PropTypes.string.isRequired,
};

class App extends React.Component {
  constructor(props, state) {
    super(props, state);

    this.state = {
      open: false,
    };
  }

  handleDrawerOpen() {
    this.setState({ open: true });
  }

  handleDrawerClose() {
    this.setState({ open: false });
  }

  authenticateWithToken(token) {
    let vm = this;
    let $ = window.$;

    $.ajax(
      {
        url: "/authenticateWithToken?token=" + token,
        method: 'GET',
        dataType: 'json'
      })
      .done(function (data) {
        window.csrf_token = data.csrf;
        Auth.authenticateUser(data.token, data.user);
        vm.setState({ current_user: data.user });
      })
      .fail(function (data) {
        console.log('error authenticating user with token', token, data)
        Auth.deauthenticateUser();
        window.location = "/signin";
      })
  }

  authenticateWithRequest() {
    let vm = this;
    let $ = window.$;

    $.ajax(
      {
        url: "/me",
        method: 'GET',
        dataType: 'json'
      })
      .done(function (data) {
        window.csrf_token = data.csrf;
        Auth.authenticateUser(data.token, data.user);
        vm.setState({ current_user: data.user });
      })
      .fail(function (data) {
        console.log('error getting user', data);
        Auth.deauthenticateUser();
        window.location = "/signin";
      })
  }

  componentWillMount() {
    if (Auth.isUserAuthenticated()) {
      this.authenticateWithToken(Auth.getToken());
    } else {
      this.authenticateWithRequest();
    }
  }

  isAuthenticated() {
    return Auth.isUserAuthenticated() && this.state && typeof this.state.current_user !== 'undefined'
  }

  signOut() {
    Auth.deauthenticateUser();
    window.location = "/signout";
  }

  render() {
    const { classes, theme } = this.props;

      return (
        <div className={classes.root}>
          <CssBaseline />
          <AppBar
            position="fixed"
            className={classNames(classes.appBar, {
              [classes.appBarShift]: this.state.open,
            })}
          >
            <Toolbar disableGutters={!this.state.open}>
              <IconButton
                color="inherit"
                aria-label="Open drawer"
                onClick={this.handleDrawerOpen.bind(this)}
                className={classNames(classes.menuButton, {
                  [classes.hide]: this.state.open,
                })}
              >
                <MenuIcon />
              </IconButton>
              <Typography variant="h6" color="inherit" noWrap>
                {{name | capitalize}}
              </Typography>
            </Toolbar>
          </AppBar>
          <Drawer
            variant="permanent"
            className={classNames(classes.drawer, {
              [classes.drawerOpen]: this.state.open,
              [classes.drawerClose]: !this.state.open,
            })}
            classes={ {
              paper: classNames({
                [classes.drawerOpen]: this.state.open,
                [classes.drawerClose]: !this.state.open,
              }),
            }}
            open={this.state.open}
          >
            <div className={classes.toolbar}>
              <IconButton onClick={this.handleDrawerClose.bind(this)}>
                {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}
              </IconButton>
            </div>
            <Divider />
            <List>

            { routes.filter(route => route.type === 'index').map((route, index) => {
                let RouteIcon = icons[route.icon];
                return <ListItemLink exact key={route.path} to={route.path} primary={route.name} icon={<RouteIcon />} />
              })
            }
            </List>
            <Divider />
            <List>
            { this.isAuthenticated() ? (
                <li>
                  <a href='/signout'>
                  <ListItem button >
                    <ListItemIcon>{<ExitToApp />}</ListItemIcon>
                    <ListItemText primary="Sign Out" />
                  </ListItem>
                  </a>
                </li>
              ) : (
                <li>
                  <a href='/signin'>
                    <ListItem button >
                      <ListItemIcon>{<ExitToApp />}</ListItemIcon>
                      <ListItemText primary="Sign In" />
                    </ListItem>
                    </a>
                </li>
              )
            }
            { this.isAuthenticated() ? (

                <li>
                  <a  href='/profile'>
                    <ListItem button >
                      <ListItemIcon>{<PersonIcon />}</ListItemIcon>
                      <ListItemText primary="Profile" />
                    </ListItem>
                    </a>
                </li>
              ) : (

                <li>
                  <a  href='/signup'>
                    <ListItem button >
                      <ListItemIcon>{<PersonAddIcon />}</ListItemIcon>
                      <ListItemText primary="Sign Up" />
                    </ListItem>
                    </a>
                </li>
              )
            }
            </List>
          </Drawer>
          <main className={classes.content}>
            <div className={classes.toolbar} />

              <div className="container">
                <div className="row">
                  <div className="col-sm-12 main">
                    <Switch>
                     {routes.map((route, index) => (
                       // Render the main route
                       <Route
                         key={index}
                         path={route.path}
                         exact={route.exact}
                         component={route.main}
                       />
                     ))}
                    </Switch>
                  </div>
                </div>
              </div>

          </main>
        </div>
      );
  }
}

App.propTypes = {
  classes: PropTypes.object.isRequired,
  theme: PropTypes.object.isRequired,
};

export default withStyles(styles, { withTheme: true })(App);
